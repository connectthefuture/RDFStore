<!-- $Revision: 1.2 $ of $Date: 2001/06/18 15:26:42 $. -->
<!DOCTYPE rdf:RDF [
 <!ENTITY daml-oil "http://www.daml.org/2001/03/daml+oil#">
 <!ENTITY rdf    "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
 <!ENTITY rdfs   "http://www.w3.org/2000/01/rdf-schema#">
]>
 
<rdf:RDF xmlns:rdf="&rdf;"
         xmlns:rdfs="&rdfs;"
         xmlns="&daml-oil;"
	 xmlns:daml="&daml-oil;">

<rdf:Description rdf:about="&daml-oil;">
  <versionInfo>$Id: daml+oil.daml,v 1.2 2001/06/18 15:26:42 reggiori Exp $</versionInfo>
  <imports rdf:resource="http://www.w3.org/2000/01/rdf-schema"/>
</rdf:Description>

<!-- (meta) classes of "object" and datatype classes  -->

<rdfs:Class rdf:ID="&daml-oil;Class">
  <rdfs:label>Class</rdfs:label>
  <rdfs:comment>
    The class of all "object" classes
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
</rdfs:Class>

<rdfs:Class rdf:ID="&daml-oil;Datatype">
  <rdfs:label>Datatype</rdfs:label>
  <rdfs:comment>
    The class of all datatype classes
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
</rdfs:Class>

<!-- Pre-defined top/bottom thing/nothing most/least-general (object) classes. -->

<Class rdf:ID="&daml-oil;Thing">
  <rdfs:label>Thing</rdfs:label>
  <rdfs:comment>
    The most general (object) class in DAML.
    This is equal to the union of any class and its complement.
  </rdfs:comment>
  <unionOf rdf:parseType="daml:collection">
    <rdfs:Class rdf:about="&daml-oil;#Nothing"/>
    <rdfs:Class>
      <complementOf rdf:resource="&daml-oil;Nothing"/>
    </rdfs:Class>
  </unionOf>
</Class>

<Class rdf:ID="&daml-oil;Nothing">
  <rdfs:label>Nothing</rdfs:label>
  <rdfs:comment>the class with no things in it.</rdfs:comment>
  <complementOf rdf:resource="&daml-oil;Thing"/>
</Class>

<!-- Terms for building classes from other classes. -->

<Property ID="&daml-oil;equivalentTo"> <!-- equals? equiv? renames? -->
  <rdfs:label>equivalentTo</rdfs:label>
  <comment>
    for equivalentTo(X, Y), read X is an equivalent term to Y.
  </comment>
</Property>

<Property ID="&daml-oil;sameClassAs">
  <rdfs:label>sameClassAs</rdfs:label>
  <comment>
    for sameClassAs(X, Y), read X is an equivalent class to Y.
    cf OIL Equivalent
  </comment>
  <rdfs:subPropertyOf rdf:resource="&daml-oil;equivalentTo"/>
  <rdfs:subPropertyOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>
  <rdfs:domain rdf:resource="&daml-oil;Class"/>
  <rdfs:range rdf:resource="&daml-oil;Class"/>
</Property>

<Property ID="&daml-oil;samePropertyAs">
  <rdfs:label>samePropertyAs</rdfs:label>
  <rdfs:comment>
    for samePropertyAs(P, R), read P is an equivalent property to R.
  </rdfs:comment>
  <rdfs:subPropertyOf rdf:resource="&daml-oil;equivalentTo"/>
  <rdfs:subPropertyOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>
</Property>

<Property ID="&daml-oil;sameIndividualAs">
  <rdfs:label>sameIndividualAs</rdfs:label>
  <rdfs:comment>
    for sameIndividualAs(a, b), read a is the same individual as b.
  </rdfs:comment>
  <rdfs:subPropertyOf rdf:resource="&daml-oil;equivalentTo"/>
  <rdfs:domain rdf:resource="&daml-oil;Thing"/>
  <rdfs:range rdf:resource="&daml-oil;Thing"/>
</Property>

<rdf:Property rdf:ID="&daml-oil;disjointWith">
  <rdfs:label>disjointWith</rdfs:label>
  <rdfs:comment>
    for disjointWith(X, Y) read: X and Y have no members in common.
    cf OIL Disjoint
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Class"/>
  <rdfs:range rdf:resource="&daml-oil;Class"/>
</rdf:Property>

<Property ID="&daml-oil;differentIndividualFrom">
  <rdfs:label>differentIndividualFrom</rdfs:label>
  <rdfs:comment>
    for differentIndividualFrom(a, b), read a is not the same individual as b.
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Thing"/>
  <rdfs:range rdf:resource="&daml-oil;Thing"/>
</Property>


<!-- NOTE: the Disjoint class has been deleted: use disjointWith -->
<!-- or disjointUnionOf instead. -->

<rdf:Property rdf:ID="&daml-oil;unionOf">
  <rdfs:label>unionOf</rdfs:label>
  <rdfs:comment>
    for unionOf(X, Y) read: X is the union of the classes in the list Y;
    i.e. if something is in any of the classes in Y, it's in X, and vice versa.
    cf OIL OR
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Class"/>
  <rdfs:range rdf:resource="&daml-oil;List"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;disjointUnionOf">
  <rdfs:label>disjointUnionOf</rdfs:label>
  <rdfs:comment>
    for disjointUnionOf(X, Y) read: X is the disjoint union of the classes in
    the list Y: (a) for any c1 and c2 in Y, disjointWith(c1, c2),
    and (b) unionOf(X, Y). i.e. if something is in any of the classes in Y, it's
    in X, and vice versa.
    cf OIL disjoint-covered
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Class"/>
  <rdfs:range rdf:resource="&daml-oil;List"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;intersectionOf">
  <rdfs:label>intersectionOf</rdfs:label>
  <rdfs:comment>
    for intersectionOf(X, Y) read: X is the intersection of the classes in the list Y;
    i.e. if something is in all the classes in Y, then it's in X, and vice versa.
    cf OIL AND
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Class"/>
  <rdfs:range rdf:resource="&daml-oil;List"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;complementOf">
  <rdfs:label>complementOf</rdfs:label>
  <rdfs:comment>
    for complementOf(X, Y) read: X is the complement of Y; if something is in Y,
    then it's not in X, and vice versa.
    cf OIL NOT
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Class"/>
  <rdfs:range rdf:resource="&daml-oil;Class"/>
</rdf:Property>

<!-- Term for building classes by enumerating their elements -->

<rdf:Property rdf:ID="&daml-oil;oneOf">
  <rdfs:label>oneOf</rdfs:label>
  <rdfs:comment>
     for oneOf(C, L) read everything in C is one of the
     things in L;
     This lets us define classes by enumerating the members.
     cf OIL OneOf
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Class"/>
  <rdfs:range rdf:resource="&daml-oil;List"/>
</rdf:Property>

<!-- Terms for building classes by restricting their properties. -->

<rdfs:Class rdf:ID="&daml-oil;Restriction">
  <rdfs:label>Restriction</rdfs:label>
  <rdfs:comment>
    something is in the class R if it satisfies the attached restrictions, 
    and vice versa.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="&daml-oil;Class"/>
</rdfs:Class>

<rdf:Property rdf:ID="&daml-oil;onProperty">
  <rdfs:label>onProperty</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P), read:
    R is a restricted with respect to property P.
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;toClass">
  <rdfs:label>toClass</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P) and toClass(R, X), read:
    i is in class R if and only if for all j, P(i, j) implies type(j, X).
    cf OIL ValueType
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;hasValue">
  <rdfs:label>hasValue</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P) and hasValue(R, V), read:
    i is in class R if and only if P(i, V).
    cf OIL HasFiller
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;hasClass">
  <rdfs:label>hasClass</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P) and hasClass(R, X), read:
    i is in class R if and only if for some j, P(i, j) and type(j, X).
    cf OIL HasValue
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
</rdf:Property>

<!-- Note that cardinality restrictions on transitive properties, or     -->
<!-- properties with transitive sub-properties, compromise decidability. -->

<rdf:Property rdf:ID="&daml-oil;minCardinality">
  <rdfs:label>minCardinality</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P) and minCardinality(R, n), read:
    i is in class R if and only if there are at least n distinct j with P(i, j).
    cf OIL MinCardinality
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/10/XMLSchema#nonNegativeInteger"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;maxCardinality">
  <rdfs:label>maxCardinality</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P) and maxCardinality(R, n), read:
    i is in class R if and only if there are at most n distinct j with P(i, j).
    cf OIL MaxCardinality
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/10/XMLSchema#nonNegativeInteger"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;cardinality">
  <rdfs:label>cardinality</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P) and cardinality(R, n), read:
    i is in class R if and only if there are exactly n distinct j with P(i, j).
    cf OIL Cardinality
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/10/XMLSchema#nonNegativeInteger"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;hasClassQ">
  <rdfs:label>hasClassQ</rdfs:label>
  <rdfs:comment>
    property for specifying class restriction with cardinalityQ constraints
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;minCardinalityQ">
  <rdfs:label>minCardinality</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P), minCardinalityQ(R, n) and hasClassQ(R, X), read:
    i is in class R if and only if there are at least n distinct j with P(i, j) 
    and type(j, X).
    cf OIL MinCardinality
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/10/XMLSchema#nonNegativeInteger"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;maxCardinalityQ">
  <rdfs:label>maxCardinality</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P), maxCardinalityQ(R, n) and hasClassQ(R, X), read:
    i is in class R if and only if there are at most n distinct j with P(i, j)
    and type(j, X).
    cf OIL MaxCardinality
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/10/XMLSchema#nonNegativeInteger"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;cardinalityQ">
  <rdfs:label>cardinality</rdfs:label>
  <rdfs:comment>
    for onProperty(R, P), cardinalityQ(R, n) and hasClassQ(R, X), read:
    i is in class R if and only if there are exactly n distinct j with P(i, j)
    and type(j, X).
    cf OIL Cardinality
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;Restriction"/>
  <rdfs:range rdf:resource="http://www.w3.org/2000/10/XMLSchema#nonNegativeInteger"/>
</rdf:Property>

<!-- Classes and Properties for different kinds of Property -->

<rdfs:Class rdf:ID="&daml-oil;ObjectProperty">
  <rdfs:label>ObjectProperty</rdfs:label>
  <rdfs:comment>
    if P is an ObjectProperty, and P(x, y), then y is an object.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
</rdfs:Class>

<rdfs:Class rdf:ID="&daml-oil;DatatypeProperty">
  <rdfs:label>DatatypeProperty</rdfs:label>
  <rdfs:comment>
    if P is a DatatypeProperty, and P(x, y), then y is a data value.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
</rdfs:Class>

<rdf:Property rdf:ID="&daml-oil;inverseOf">
  <rdfs:label>inverseOf</rdfs:label>
  <rdfs:comment>
    for inverseOf(R, S) read: R is the inverse of S; i.e.
    if R(x, y) then S(y, x) and vice versa.
    cf OIL inverseRelationOf
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;ObjectProperty"/>
  <rdfs:range rdf:resource="&daml-oil;ObjectProperty"/>
</rdf:Property>

<rdfs:Class rdf:ID="&daml-oil;TransitiveProperty">
  <rdfs:label>TransitiveProperty</rdfs:label>
  <rdfs:comment>
    if P is a TransitiveProperty, then if P(x, y) and P(y, z) then P(x, z).
    cf OIL TransitiveProperty.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="&daml-oil;ObjectProperty"/>
</rdfs:Class>

<rdfs:Class rdf:ID="&daml-oil;UniqueProperty">
  <rdfs:label>UniqueProperty</rdfs:label>
  <rdfs:comment>
    compare with maxCardinality=1; e.g. integer successor:
    if P is a UniqueProperty, then if P(x, y) and P(x, z) then y=z.
    cf OIL FunctionalProperty.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
</rdfs:Class>

<rdfs:Class rdf:ID="&daml-oil;UnambiguousProperty">
  <rdfs:label>UnambiguousProperty</rdfs:label>
  <rdfs:comment>
    if P is an UnambiguousProperty, then if P(x, y) and P(z, y) then x=z.
    aka injective. e.g. if firstBorne(m, Susan)
    and firstBorne(n, Susan) then m and n are the same.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="&daml-oil;ObjectProperty"/>
</rdfs:Class>

<!-- List terminology. -->

<rdfs:Class rdf:ID="&daml-oil;List">
  <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Seq"/>
</rdfs:Class>

<List rdf:ID="&daml-oil;nil">
  <rdfs:comment>
     the empty list; this used to be called Empty.
  </rdfs:comment>
</List>

<rdf:Property rdf:ID="&daml-oil;first">
  <rdfs:domain rdf:resource="&daml-oil;List"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;rest">
  <rdfs:domain rdf:resource="&daml-oil;List"/>
  <rdfs:range rdf:resource="&daml-oil;List"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;item">
  <rdfs:comment>
    for item(L, I) read: I is an item in L; either first(L, I)
    or item(R, I) where rest(L, R).
  </rdfs:comment>
  <rdfs:domain rdf:resource="&daml-oil;List"/>
</rdf:Property>

<!-- A class for ontologies themselves... -->

<rdfs:Class rdf:ID="&daml-oil;Ontology">
  <rdfs:label>Ontology</rdfs:label>
  <rdfs:comment>
    An Ontology is a document that describes
    a vocabulary of terms for communication between
    (human and) automated agents.
  </rdfs:comment>
</rdfs:Class>

<rdf:Property rdf:ID="&daml-oil;versionInfo">
  <rdfs:label>versionInfo</rdfs:label>
  <rdfs:comment>
    generally, a string giving information about this
    version; e.g. RCS/CVS keywords
  </rdfs:comment>
</rdf:Property>

<!-- Importing, i.e. assertion by reference -->

<rdf:Property rdf:ID="&daml-oil;imports">
  <rdfs:label>imports</rdfs:label>
  <rdfs:comment>
    for imports(X, Y) read: X imports Y;
    i.e. X asserts the* contents of Y by reference;
    i.e. if imports(X, Y) and you believe X and Y says something,
    then you should believe it.
    Note: "the contents" is, in the general case,
    an il-formed definite description. Different
    interactions with a resource may expose contents
    that vary with time, data format, preferred language,
    requestor credentials, etc. So for "the contents",
    read "any contents".
  </rdfs:comment>
</rdf:Property>

<!-- Importing terms from RDF/RDFS -->

<!-- first, assert the contents of the RDF schema by reference -->
<Ontology rdf:about="&daml-oil;">
  <imports rdf:resource="http://www.w3.org/2000/01/rdf-schema"/>
</Ontology>

<rdf:Property rdf:ID="&daml-oil;subPropertyOf">
  <samePropertyAs  rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>
</rdf:Property>

<rdfs:Class rdf:ID="&daml-oil;Literal">
  <sameClassAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
</rdfs:Class>

<rdfs:Class rdf:ID="&daml-oil;Property">
  <sameClassAs rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
</rdfs:Class>

<rdf:Property rdf:ID="&daml-oil;type">
  <samePropertyAs rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;value">
  <samePropertyAs rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#value"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;subClassOf">
  <samePropertyAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;domain">
  <samePropertyAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#domain"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;range">
  <samePropertyAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#range"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;label">
  <samePropertyAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;comment">
  <samePropertyAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#comment"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;seeAlso">
  <samePropertyAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#seeAlso"/>
</rdf:Property>

<rdf:Property rdf:ID="&daml-oil;isDefinedBy">
  <samePropertyAs rdf:resource="http://www.w3.org/2000/01/rdf-schema#isDefinedBy"/>
  <rdfs:subPropertyOf rdf:resource="&daml-oil;seeAlso"/>
</rdf:Property>

</rdf:RDF>
